{"name":"Angular Table","tagline":"An angular directive for a table with fixed, sortable headers, row selection, row even/odd coloring, which automatically stays the correct height relative to its container when the browser is resized.  No javascript code required; the api is a 100% declarative dsl.","body":"Angular Table\r\n=============\r\n\r\nAn angular directive for a table with fixed, sortable headers, row selection, row even/odd coloring, \r\nwhich automatically stays the correct height relative to its container when the browser is resized. \r\nNo javascript code required; the api is a 100% declarative dsl.\r\n\r\nQuick Start\r\n-----------\r\n\r\n* include angular.js, angular-table.js, and angular-table.css.\r\n* Put this in your template: \r\n\r\n```html\r\n\r\n<angular-table model=\"[ { id: 1, name: 'Bob', street: '1 street ave' } ]\" \r\n    default-sort-column=\"id\">\r\n    <header-row>\r\n        <header-column sortable=\"true\" sort-field-name=\"id\">\r\n            <div style=\"display: inline-block;\">Id</div>\r\n            <sort-arrow-ascending></sort-arrow-ascending>\r\n            <sort-arrow-descending></sort-arrow-descending>\r\n        </header-column>\r\n        <header-column sortable=\"false\" sort-field-name=\"name\">\r\n            Name\r\n        </header-column>\r\n        <header-column sortable=\"true\" sort-field-name=\"street\">\r\n            <div style=\"display: inline-block;\">Street</div>\r\n            <sort-arrow-ascending></sort-arrow-ascending>\r\n            <sort-arrow-descending></sort-arrow-descending>\r\n        </header-column>\r\n    </header-row>\r\n\r\n    <row on-selected=\"handleRowSelection(row)\" selected-color=\"#87cefa\" \r\n        even-color=\"#ffffff\" odd-color=\"#eeeeee\">\r\n        <column>{{ row.id }}</column>\r\n        <column>{{ row.name }}</column>\r\n        <column class=\"demoFarRightColumn\">{{ row.street }}</input></column>\r\n    </row>\r\n</angular-table>\r\n\r\n```\r\n\r\nLive Demo:\r\n----------\r\n\r\n* [Angular Table Demo](http://angulartable.com/demo/index.html)\r\n* [Angular Table Demo with ugly data, showing how you can abuse the css you pass in, but still have a functional grid.](http://angulartable.com/demo/index-ugly.html)\r\n\r\nPhilosophy:\r\n-----------\r\n\r\nStart with a solid foundation of an easy to use api, provided as a custom html tag, also known as a \r\ndomain specific language.  Only implement features with use cases in apps being pushed to production.  Keep the\r\ncode clean, lean, and blazing fast.\r\n\r\nFeatures:\r\n---------\r\n\r\n* 100% declarative dsl - no javascript required\r\n* fixed headers\r\n* sortable headers\r\n* sorting tracks the state of ascending / descending on a per column basis\r\n* extremely easy to customize, just add your own html and css to the custom html tags.  it just works!\r\n* simple row selection.  just pass the name of a method on your controller scope, and the row will be passed in.\r\n* row even/odd coloring\r\n* rows are bound to a model, which is simply an array of your objects, allowing for simple customization \r\nand data loading\r\n* enable / disable sorting of columns\r\n* when the browser is resized or data is added / removed from the bound model, as scrollbars appear / disappear \r\nthe fixed header columns adjust their width to pixel perfection.\r\n* when the browser is resized or data is added / removed from the bound model, the height of the scrolling\r\ncontainer adjusts its height to pixel perfection, even if your container's height is specified in percentages.\r\n* does not require any dependencies other than stock angular.  no jquery needed.\r\n* simple.  only 400 lines of code.\r\n\r\nStyling the ascending / descending icons:\r\n-----------------------------------------\r\n\r\n* To use the default styling, ensure your header text is in an element with the style:  display: inline-block applied\r\nso that the icon and your header text aligns.\r\n* To customize the styling, remove or change the classes 'angularTableDefaultSortArrowAscending' and\r\n'angularTableDefaultSortArrowDescending' in angular-table.css.\r\n\r\nWhy Not Use ng-grid or smart table?\r\n-----------------------------------\r\n\r\nWhile I deeply respect the work these folks have done, there were some issues I had that prevented me from using either.  \r\nI originally started with ng-grid, and really wanted to use it.\r\n\r\n**Smart Table**\r\n\r\n* My use case required fixed headers, and its lack of support for that was a deal breaker.\r\n\r\n**ng-grid**\r\n\r\n* No declarative configuration and customization.  You have to edit templates and options in javascript.\r\n* A serious, dealbreaker bug where the selected row changes when you sort the columns.  I filed the bug\r\nand after over a week no one working on it has responded.\r\n* A serious, dealbreaker design issue where the column used to house the scrollbar appears even if no scrollbar is present.\r\nI implemented a workaround by using a negative left margin for the content I needed to be flush to the right of the grid.\r\nThis sort of worked, but wasn't pixel perfect and felt hacky.\r\n* The code was too lengthy for my taste.  Weighing in at 3,400 lines, it supported a ton of \r\nfunctionality that I would never need.\r\n* It requires jquery.  I'm working hard to completely remove jquery from my app and this would be another\r\nspot requiring me to keep it.\r\n\r\nContributing And Feature Requests\r\n---------------------------------\r\n\r\nI'd love to see both pull requests and feature requests come in.  Please make sure though that anything you send in uses a 100%\r\ndeclarative configuration, and is an actual use case you are using for a production app.  If there are not real \r\nuse cases for features, I won't add them.\r\n\r\nDiscuss on Hacker News:\r\n\r\n\r\n\r\nFollow me on Twitter:\r\nhttps://twitter.com/david_j_nelson\r\n\r\n","google":"UA-6242674-16","note":"Don't delete this file! It's used internally to help with page regeneration."}